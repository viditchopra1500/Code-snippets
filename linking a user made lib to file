A library is an "archive" that contains already compiled code. Typically, you want to use a ready-made library to use some 
functionality that you don't want to implement on your own (e.g. decoding JPEGs, parsing XML, providing you GUI widgets, you 
name it).

Typically in C and C++ using a library goes like this: you #include some headers of the library that contain the function/class
declarations - i.e. they tell the compiler that the symbols you need do exist somewhere, without actually providing their code. 
Whenever you use them, the compiler will place in the object file a placeholder, which says that that function call is to be 
resolved at link time, when the rest of the object modules will be available.


Then, at the moment of linking, you have to specify the actual library where the compiled code for the functions of the library 
is to be found; the linker then will link this compiled code with yours and produce the final executable (or, in the case of 
dynamic libraries, it will add the relevant information for the loader to perform the dynamic linking at runtime).

If you don't specify that the library is to be linked against, the linker will have unresolved references - i.e. it will see 
that some functions were declared, you used them in your code, but their implementation is nowhere to be found; this is the 
cause of the infamous "undefined reference errors".


Notice that all this process is identical to what normally happens when you compile a project that is made of multiple .cpp 
files: each .cpp is compiled independently (knowing of the functions defined in the others only via prototypes, typically 
written in .h files), and at the end everything is linked together to produce the final executable.
